/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reflexion;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class EntityManagerImpl {
    private Connection connection;

    // Constructor
    public EntityManagerImpl() {
        initializeDb();
    }

    public static void main(String[] args) {
        EntityManagerImpl entityManager = new EntityManagerImpl();

        // Insérer des données de test dans la table Club
        Club club1 = new Club();
        club1.setFabricant("Fabricant A");
        club1.setPoids(10.3);

        entityManager.persist(club1);

        // Tester la méthode find avec la classe Club et une clé primaire spécifique
        Club club = entityManager.find(Club.class, club1.getId());

        if (club != null) {
            System.out.println("Entity found: " + club);
        } else {
            System.out.println("Entity not found.");
        }

        // Fermer la connexion après les tests
        entityManager.closeConnection();
    }

    // Methodes
    public <T> T find(Class<T> entityClass, Object primaryKey) {
        T entity = null;
        try {
            String tableName = entityClass.getSimpleName();

            ResultSet result = connection
                    .createStatement(
                            ResultSet.TYPE_SCROLL_INSENSITIVE,
                            ResultSet.CONCUR_UPDATABLE)
                    .executeQuery(
                            "SELECT * FROM " + tableName + " WHERE id = " + primaryKey);

            if (result.first()) {
                entity = entityClass.getDeclaredConstructor().newInstance();
                for (Field field : entityClass.getDeclaredFields()) {
                    if (field.getName() == "version") {
                        break;
                    }
                    entityClass.getMethod("set" + capitalizeFirstLetter(field.getName()), field.getType()).invoke(
                            entity,
                            result.getString(field.getName()));
                }
            }
        } catch (SQLException | ReflectiveOperationException e) {
            e.printStackTrace();
        }
        return entity;
    }

    public <T> T merge(T entity) {
        return null;
    }

    public void persist(Object entity) {
        try {
            if (entity != null) {
                Class<?> entityClass = entity.getClass();
                String tableName = entityClass.getSimpleName();

                // Récupération des attributs et valeurs
                StringBuilder columns = new StringBuilder();
                StringBuilder values = new StringBuilder();

                for (Field field : entityClass.getDeclaredFields()) {
                    if (field.getName() == "version") {
                        break;
                    }
                    columns.append(field.getName()).append(",");
                    values.append("'").append(
                            entityClass.getMethod("get" + capitalizeFirstLetter(field.getName())).invoke(entity))
                            .append("',");
                }

                // Construction de la requête SQL
                String insertQuery = "INSERT INTO " + tableName + " (" + columns.substring(0, columns.length() - 1)
                        + ") VALUES ("
                        + values.substring(0, values.length() - 1) + ")";

                // Exécution de la requête
                connection.createStatement().executeUpdate(insertQuery);

                System.out.println("Entity persisted successfully!");
            }
        } catch (SQLException | ReflectiveOperationException e) {
            e.printStackTrace();
        }
    }

    // Fermeture de la connexion
    public void closeConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
                System.out.println("Database connection successfully closed!");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Privates methodes
    private void initializeDb() {
        // Constantes
        final String DB_URL = "jdbc:hsqldb:mem:database";
        final String DB_USER = "SA";
        final String DB_PASSWORD = "";

        try {
            connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            Statement statement = connection.createStatement();

            // Récupération de la class Club
            Class<?> entityClass = Club.class;
            // Récupération du nom de la class
            String tableName = entityClass.getSimpleName();

            // Création de la commande SQL
            StringBuilder createTableSQL = new StringBuilder("CREATE TABLE IF NOT EXISTS " + tableName + " (");
            // Parcours des attributs
            for (Field field : entityClass.getDeclaredFields()) {
                if (field.getName() == "version") {
                    break;
                }
                // Attribution du type de l'attribut
                String type = "";
                switch (field.getType().getName()) {
                    case "java.lang.Long":
                        type = "BIGINT";
                        break;
                    case "java.lang.Integer", "int":
                        type = "INT";
                        break;
                    case "java.lang.Double":
                        type = "DOUBLE";
                        break;
                    case "java.lang.String":
                        type = "VARCHAR(255)";
                        break;
                    default:
                        throw new IllegalArgumentException("Type not supported: " + field.getType().getName());
                }

                // Création de l'attribut
                createTableSQL.append(field.getName() + " " + type + ",");
            }
            createTableSQL.append("PRIMARY KEY (id))");

            // Execution de la commande SQL
            statement.executeUpdate(createTableSQL.toString());
            System.out.println("Table created successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static String capitalizeFirstLetter(String input) {
        if (input == null || input.isEmpty()) {
            return input;
        }
        return Character.toUpperCase(input.charAt(0)) + input.substring(1);
    }
}
