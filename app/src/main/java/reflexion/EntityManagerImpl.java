/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reflexion;

import java.lang.reflect.Field;
import java.sql.*;

public class EntityManagerImpl {
    private static Connection connection;

    // Constructor
    public EntityManagerImpl() {
        initializeDb();
    }

    public static void main(String[] args) {
        Club club = new Club();
        club.setFabricant("un nom");
        club.setPoids(10.3);

        Club club2 = new Club();
        club2.setFabricant("un autre nom");
        club2.setPoids(10.0);

        Club club3 = new Club();
        club3.setFabricant("un nieme nom");
        club3.setPoids(9.0);

        EntityManagerImpl em = new EntityManagerImpl();
        em.persist(club);
        em.persist(club2);
        em.persist(club3);

        Club trouve = em.<Club>find(Club.class, 1);
		System.out.println(trouve.getFabricant() + " " + trouve.getId() + " " + trouve.getPoids());

        // Fermer la connexion après les tests
        em.closeConnection();
    }

    // Methodes
    public <T> T find(Class<T> entityClass, Object primaryKey) {
        T entity = null;
        try {
            String tableName = entityClass.getSimpleName().toLowerCase();

            ResultSet result = connection
                    .createStatement(
                            ResultSet.TYPE_SCROLL_INSENSITIVE,
                            ResultSet.CONCUR_UPDATABLE)
                    .executeQuery(
                            "SELECT * FROM " + tableName + " WHERE id = " + primaryKey);
            if (result.first()) {
                entity = entityClass.getDeclaredConstructor().newInstance();
                for (Field field : entityClass.getDeclaredFields()) {
                    if (field.getName().equals("version")) {
                        continue;
                    }
                    String fieldName = field.getType().getSimpleName();
                    
                    switch (fieldName) {
                        case "Long":
                            entityClass.getMethod("set" + capitalizeFirstLetter(field.getName()), Long.class).invoke(
                                    entity,
                                    result.getLong(field.getName()));
                            break;
                        case "Integer", "int":
                            entityClass.getMethod("set" + capitalizeFirstLetter(field.getName()), int.class).invoke(
                                    entity,
                                    result.getInt(field.getName()));
                            break;
                        case "Double":
                            entityClass.getMethod("set" + capitalizeFirstLetter(field.getName()), Double.class).invoke(
                                    entity,
                                    result.getDouble(field.getName()));
                            break;
                        case "String":
                            entityClass.getMethod("set" + capitalizeFirstLetter(field.getName()), String.class).invoke(
                                    entity,
                                    result.getString(field.getName()));
                            break;
                        default:
                            throw new IllegalArgumentException("Type not supported: " + field.getType().getName());
                    }
                }
            }
        } catch (SQLException | ReflectiveOperationException e) {
            e.printStackTrace();
        }
        return entity;
    }

    public <T> T merge(T entity) {
        T mergedEntity = null;
        return mergedEntity;
    }

    public void persist(Object entity) {
        try {
            if (entity != null) {
                Class<?> entityClass = entity.getClass();
                String tableName = entityClass.getSimpleName().toLowerCase();

                // Récupération des attributs et valeurs
                StringBuilder columns = new StringBuilder("");
                StringBuilder values = new StringBuilder("");

                for (Field field : entityClass.getDeclaredFields()) {
                    if (field.getName().equals("version")) {
                        continue;
                    } else {
                        columns.append(field.getName()).append(",");
                        if (field.getName().equals("id")) {
                            values.append("DEFAULT,");
                        } else {
                            if (field.getType().getName().equals("java.lang.String")) {
                                values.append("'").append(
                                        entityClass.getMethod("get" + capitalizeFirstLetter(field.getName()))
                                                .invoke(entity))
                                        .append("',");
                            } else {
                                values.append(
                                        entityClass.getMethod("get" + capitalizeFirstLetter(field.getName()))
                                                .invoke(entity))
                                        .append(",");
                            }
                        }
                    }
                }

                // Construction de la requête SQL
                String insertQuery = "INSERT INTO " + tableName + " (" + columns.substring(0, columns.length() - 1)
                        + ") VALUES ("
                        + values.substring(0, values.length() - 1) + ")";

                // Exécution de la requête
                Statement statement = connection.createStatement();
                statement.executeUpdate(insertQuery);
                // Récupération de la clé générée
                ResultSet resultSet = statement.executeQuery("CALL IDENTITY()");

                if (resultSet.next()) {
                    Long generatedId = resultSet.getLong(1);
                    System.out.println("Entity persisted successfully ! ID: " + generatedId);
                }
            }
        } catch (SQLException | ReflectiveOperationException e) {
            e.printStackTrace();
        }
    }

    // Fermeture de la connexion
    public void closeConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
                System.out.println("Database connection successfully closed!");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Privates methodes
    private void initializeDb() {
        // Constantes
        final String DB_URL = "jdbc:hsqldb:mem:database";
        final String DB_USER = "SA";
        final String DB_PASSWORD = "";

        try {
            connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            Statement statement = connection.createStatement();

            // Récupération de la class Club
            Class<?> entityClass = Club.class;
            // Récupération du nom de la class
            String tableName = entityClass.getSimpleName().toLowerCase();

            // Création de la commande SQL
            StringBuilder createTableSQL = new StringBuilder("CREATE TABLE IF NOT EXISTS " + tableName + " (");
            // Parcours des attributs
            for (Field field : entityClass.getDeclaredFields()) {
                if (field.getName().equals("version")) {
                    continue;
                }
                // Attribution du type de l'attribut
                String type = "";
                switch (field.getType().getSimpleName()) {
                    case "Long":
                        type = "BIGINT";
                        break;
                    case "Integer", "int":
                        type = "INT";
                        break;
                    case "Double":
                        type = "DOUBLE";
                        break;
                    case "String":
                        type = "VARCHAR(255)";
                        break;
                    default:
                        throw new IllegalArgumentException("Type not supported: " + field.getType().getName());
                }
                // Création de l'attribut
                if (field.getName().equals("id")) {
                    createTableSQL.append(field.getName() + " " + type + " IDENTITY PRIMARY KEY,");
                } else {
                    createTableSQL.append(field.getName() + " " + type + ",");
                }

            }

            // Execution de la commande SQL
            statement.executeUpdate(createTableSQL.substring(0, createTableSQL.length() - 1) + ");");

            System.out.println("Table created successfully !");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static String capitalizeFirstLetter(String input) {
        if (input == null || input.isEmpty()) {
            return input;
        }
        return Character.toUpperCase(input.charAt(0)) + input.substring(1);
    }
}
